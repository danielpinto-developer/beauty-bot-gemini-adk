const axios = require("axios");
const { GoogleAuth } = require("google-auth-library");

console.log("üì¶ Loading Gemini module...");

const hasTuned = !!process.env.TUNED_MODEL_NAME;

if (hasTuned) {
  if (!process.env.GOOGLE_APPLICATION_CREDENTIALS) {
    console.error("‚ùå GOOGLE_APPLICATION_CREDENTIALS is missing from env");
    throw new Error("Missing GOOGLE_APPLICATION_CREDENTIALS");
  }
  console.log(`‚ö° Using tuned model: ${process.env.TUNED_MODEL_NAME}`);
} else if (process.env.GEMINI_BASE_MODEL) {
  if (!process.env.GEMINI_API_KEY) {
    console.error("‚ùå GEMINI_API_KEY is missing from .env");
    throw new Error("Missing GEMINI_API_KEY");
  }
  console.log(`‚ö° Using base model: ${process.env.GEMINI_BASE_MODEL}`);
} else {
  throw new Error("No model configured");
}

// Build modelName, stripping any '@version' suffix when using tuned model
const rawName = process.env.TUNED_MODEL_NAME;
const modelName = hasTuned
  ? String(rawName || "").split("@")[0]
  : `models/${process.env.GEMINI_BASE_MODEL}`;

console.log(`‚úÖ Gemini model initialized: ${modelName}`);

const validServicios = [
  // üíÖ NAIL BAR
  "manicure spa",
  "manicure ruso",
  "u√±as acr√≠licas",
  "u√±as soft gel",
  "gelish",
  "rubber",
  "pedicure spa",
  "acripie",
  "gelish en pies",

  // üëÅÔ∏è LASH STUDIO
  "pesta√±as cl√°sicas",
  "pesta√±as rimel",
  "pesta√±as h√≠bridas",
  "pesta√±as mojado",
  "volumen hawaiano",
  "volumen ruso",
  "volumen americano",
  "pesta√±as efecto especial",
  "mega volumen",
  "chopy",
  "bratz",
  "wispy",
  "anime",
  "coreano",
  "foxy",
  "eye liner",
  "degradado de color",

  // üßñ‚Äç‚ôÄÔ∏è BEAUTY LAB
  "bblips",
  "bb glow",
  "bb glow facial",
  "relleno de labios",
  "enzimas reductoras (corporal)",
  "armonizaci√≥n facial con enzimas",

  // üëÅÔ∏è CEJAS
  "lifting de pesta√±as",
  "lifting de cejas",
  "dise√±o de cejas hd",
  "dise√±o de cejas 4k",
  "consulta microblading",
  "microblading",
  "microshading pro",

  // ‚ú® HAIR & GLOW
  "ba√±o de color",
  "tinte",
  "matiz",
  "retoque de ca√±a",
  "dise√±o de color",
  "corte de dama",
  "keratina",
  "nanoplastia japonesa",
  "botox capilar",
  "tratamiento capilar premium",

  // üßΩ DEPILACI√ìN INDIVIDUAL
  "bigote",
  "cejas",
  "patilla",
  "barbilla",
  "mejillas",
  "axila",
  "piernas completas",
  "medias piernas",
  "piernas",
  "bikini",
  "bikini brasile√±o",
  "l√≠nea intergl√∫eta",
  "fosas nasales",
  "espalda completa",
  "media espalda baja",
  "abdomen",
  "brazos completos",
  "brazos",
  "medios brazos",
  "gl√∫teos media",
  "gl√∫teos completos",

  // üéÅ DEPILACI√ìN PAQUETES
  "cara completa 1",
  "cara completa 3",
  "cara completa 5",
  "piernas y brazos 1",
  "piernas y brazos 3",
  "piernas y brazos 5",
  "cuerpo completo 1",
  "cuerpo completo 3",
  "cuerpo completo 5",
];

function validateServicioKey(key) {
  if (!key) return null;
  const cleaned = key.toLowerCase().trim();
  return validServicios.includes(cleaned) ? cleaned : null;
}

const systemPrompt = `
Eres BeautyBot, la asistente profesional y c√°lida de Beauty Blossoms Studio, un sal√≥n de belleza en Zapopan, Jalisco.

Tu √∫nica tarea es:
1. Detectar la intenci√≥n del usuario
2. Extraer los siguientes datos si est√°n presentes:
   - servicio (u√±as, pesta√±as, etc.)
   - fecha (hoy, ma√±ana, martes, 10 de agosto, etc.)
   - hora (10am, 2:30pm, etc.)
3. Responder en espa√±ol, en m√°ximo 3 oraciones, con calidez profesional.

Responde en este formato JSON **exacto**:

{
  "intent": "book_appointment" | "greeting" | "gratitude" | "faq_price" | "faq_location" | "fallback",
  "slots": {
    "servicio": "string or null",
    "fecha": "string or null",
    "hora": "string or null"
  },
  "response": "respuesta c√°lida para WhatsApp"
}

IMPORTANTE: el campo "servicio" debe coincidir exactamente con uno de los siguientes:
${validServicios.join(", ")}
`;

async function getGeminiReply(userText) {
  console.log("üß† getGeminiReply called with input:", userText);

  try {
    let apiUrl;
    let headers = { "Content-Type": "application/json" };

    if (hasTuned) {
      const tunedNameNoVersion = modelName; // modelName already stripped
      apiUrl = `https://us-central1-aiplatform.googleapis.com/v1/${tunedNameNoVersion}:generateContent`;
      const auth = new GoogleAuth({ scopes: ["https://www.googleapis.com/auth/cloud-platform"] });
      const client = await auth.getClient();
      const accessToken = await client.getAccessToken();
      const token = typeof accessToken === "string" ? accessToken : accessToken.token;
      headers = { ...headers, Authorization: `Bearer ${token}` };
    } else {
      apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${modelName}:generateContent?key=${process.env.GEMINI_API_KEY}`;
    }

    const requestBody = {
      contents: [
        {
          parts: [
            {
              text: systemPrompt,
            },
          ],
        },
        {
          parts: [
            {
              text: userText,
            },
          ],
        },
      ],
      generationConfig: {
        temperature: 0.7,
        maxOutputTokens: 1024,
      },
    };

    console.log("üì® Sending request to Gemini API");
    const response = await axios.post(apiUrl, requestBody, { headers });

    console.log("‚úÖ Gemini responded");
    const raw = response.data.candidates?.[0]?.content?.parts?.[0]?.text || "";
    console.log("üìÑ Raw Gemini response:\n", raw);

    const jsonMatch = raw.match(/\{[\s\S]*\}/);
    if (!jsonMatch) throw new Error("No valid JSON block found");

    const jsonText = jsonMatch[0];
    console.log("üßæ Extracted JSON snippet:\n", jsonText);

    const parsed = JSON.parse(jsonText);
    console.log("‚úÖ Parsed JSON response:", parsed);

    const cleanedServicio = validateServicioKey(parsed.slots?.servicio);

    return {
      intent: parsed.intent || "fallback",
      slots: {
        servicio: cleanedServicio,
        fecha: parsed.slots?.fecha || null,
        hora: parsed.slots?.hora || null,
      },
      response:
        parsed.response ||
        "Lo siento, no entend√≠ muy bien eso ü§ñ ¬øPodr√≠as dec√≠rmelo de otra forma?",
    };
  } catch (err) {
    console.error("‚ùå Gemini fallback error:", err.message || err);
    if (err.response) {
      console.error("üìÑ Response status:", err.response.status);
      console.error(
        "üìÑ Response data:",
        JSON.stringify(err.response.data, null, 2)
      );
    }
    return {
      intent: "fallback",
      slots: {
        servicio: null,
        fecha: null,
        hora: null,
      },
      response:
        "Lo siento, no entend√≠ muy bien eso ü§ñ ¬øPodr√≠as dec√≠rmelo de otra forma?",
    };
  }
}

module.exports = { getGeminiReply };
